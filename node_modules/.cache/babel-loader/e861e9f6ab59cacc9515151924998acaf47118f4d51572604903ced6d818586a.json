{"ast":null,"code":"var _jsxFileName = \"E:\\\\ReactTutorial\\\\react-projects\\\\expense-tracker\\\\src\\\\components\\\\NewExpenses\\\\ExpenseForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './ExpenseForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExpenseForm = () => {\n  _s();\n  // const [enteredTitle, setEnteredTitle] = useState('');\n  // const [enteredAmount, setEnteredAmount] = useState('');\n  // const [enteredDate, setEnteredDate] = useState('');\n\n  // instead of using those three useStates we can do the below thing..\n\n  const [userInput, setUserInput] = useState({\n    enteredTitle: '',\n    enteredAmount: '',\n    enteredDate: ''\n  });\n  const titleChangeHandler = event => {\n    // setEnteredTitle(event.target.value);\n    setUserInput({\n      ...userInput,\n      //here ...is called a spread operator which basically copies the input data into the userInput to avoid getting lost.\n      enteredTitle: event.target.value\n      //using this approach for managing multiple states in many cases both will work \n    });\n  };\n\n  const amountChangeHandler = event => {\n    // setEnteredAmount(event.target.value);\n    setUserInput({\n      ...userInput,\n      enteredAmount: event.target.value\n    });\n  };\n  const dateChangeHandler = event => {\n    // setEnteredDate(event.target.value);\n    setUserInput({\n      ...userInput,\n      enteredDate: event.target.value\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"\",\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: titleChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"\",\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"0.01\",\n          step: \"0.01\",\n          onChange: amountChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"\",\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          min: \"2020-01-01\",\n          max: \"2023-12-31\",\n          onChange: dateChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 12\n  }, this);\n};\n_s(ExpenseForm, \"5iA3v2QwaCq0mguF1DC2D+Hm3GY=\");\n_c = ExpenseForm;\nexport default ExpenseForm;\nvar _c;\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ExpenseForm","_s","userInput","setUserInput","enteredTitle","enteredAmount","enteredDate","titleChangeHandler","event","target","value","amountChangeHandler","dateChangeHandler","children","className","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","min","step","max","_c","$RefreshReg$"],"sources":["E:/ReactTutorial/react-projects/expense-tracker/src/components/NewExpenses/ExpenseForm.js"],"sourcesContent":["import React ,{useState} from 'react';\r\nimport './ExpenseForm.css'\r\nconst ExpenseForm=()=>\r\n{  \r\n    // const [enteredTitle, setEnteredTitle] = useState('');\r\n    // const [enteredAmount, setEnteredAmount] = useState('');\r\n    // const [enteredDate, setEnteredDate] = useState('');\r\n\r\n    // instead of using those three useStates we can do the below thing..\r\n\r\n    const [userInput,setUserInput]=useState({\r\n        enteredTitle:'',\r\n        enteredAmount:'',\r\n        enteredDate:'',\r\n    });\r\n\r\n    const titleChangeHandler=(event)=>{\r\n        // setEnteredTitle(event.target.value);\r\n        setUserInput({\r\n            ...userInput, //here ...is called a spread operator which basically copies the input data into the userInput to avoid getting lost.\r\n            enteredTitle:event.target.value,        \r\n            //using this approach for managing multiple states in many cases both will work \r\n        })\r\n    };\r\n\r\n    const amountChangeHandler=(event)=>{\r\n        // setEnteredAmount(event.target.value);\r\n        setUserInput({\r\n            ...userInput,\r\n            enteredAmount:event.target.value,\r\n        })\r\n    };\r\n    \r\n    const dateChangeHandler=(event)=>{\r\n        // setEnteredDate(event.target.value);\r\n        setUserInput({\r\n            ...userInput, \r\n            enteredDate:event.target.value,\r\n        })\r\n    };\r\n\r\n    return <form >\r\n        <div className=\"new-expense__controls\">\r\n            <div className=\"new-expense__control\">\r\n                <label htmlFor=\"\">Title</label>\r\n                <input type=\"text\" onChange={titleChangeHandler}/>\r\n            </div>\r\n            <div className=\"new-expense__control\">\r\n                <label htmlFor=\"\">Amount</label>\r\n                <input type=\"number\" min='0.01' step='0.01' onChange={amountChangeHandler}/>\r\n            </div>\r\n            <div className=\"new-expense__control\">\r\n                <label htmlFor=\"\">Date</label>\r\n                <input type=\"date\" min='2020-01-01' max='2023-12-31' onChange={dateChangeHandler} />\r\n            </div>\r\n        </div>\r\n        <div className='new-expense__actions'>\r\n            <button type='submit'>\r\n                Add Expense\r\n            </button>\r\n        </div>\r\n    </form>\r\n};\r\n\r\nexport default ExpenseForm;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}